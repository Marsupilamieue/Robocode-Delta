 configuration delta "RandomTargeting"
	dialect <http://www.emftext.org/java>
		modifies <../src/jab/module/Targeting.java>
		{
	addClassifierImport(<class:jab.module.Targeting>, "java.awt.Color");
	addClassifierImport(<class:jab.module.Targeting>, "java.awt.Graphics2D");
	addClassifierImport(<class:jab.module.Targeting>, "java.util.Random");
	addClassifierImport(<class:jab.module.Targeting>, "robocode.util.Utils");
	addMember(<class:jab.module.Targeting>, "private Random random = new Random();
");
	addMember(<class:jab.module.Targeting>, "private long lastSeenTime = 0;
");
	addMember(<class:jab.module.Targeting>, "private double lastKnownX = 0;
");
	addMember(<class:jab.module.Targeting>, "private double lastKnownY = 0;
");
	addMember(<class:jab.module.Targeting>, "private double enemyVelocity = 0;
");
	modifyStatementListContainer(<method:jab.module.Targeting.target()>, "public void target() {
            double enemyX, enemyY;
            if (bot.enemy != null) {
                enemyX = bot.enemy.x;
                enemyY = bot.enemy.y;
                lastSeenTime = System.currentTimeMillis();
                lastKnownX = enemyX;
                lastKnownY = enemyY;
                enemyVelocity = bot.enemy.velocity; // Save enemy velocity
            } else if (System.currentTimeMillis() - lastSeenTime < 3000) {
                enemyX = lastKnownX + (random.nextDouble() - 0.5) * 40;
                enemyY = lastKnownY + (random.nextDouble() - 0.5) * 40;
            } else {
                return; // No target available
            }

            double randomOffsetX = random.nextGaussian() * 20;
            double randomOffsetY = random.nextGaussian() * 20;

            double targetX = Math.max(18.0, Math.min(enemyX + randomOffsetX, bot.getBattleFieldWidth() - 18.0));
            double targetY = Math.max(18.0, Math.min(enemyY + randomOffsetY, bot.getBattleFieldHeight() - 18.0));

            double theta = Utils.normalAbsoluteAngle(Math.atan2(targetX - bot.getX(), targetY - bot.getY()));
            bot.setTurnGunRightRadians(Utils.normalRelativeAngle(theta - bot.getGunHeadingRadians()));

            toPaintX = (int) targetX;
            toPaintY = (int) targetY;
	}
", "RandomTargeting", false);
	addMember(<class:jab.module.Targeting>, "int toPaintX = 0;
");
	addMember(<class:jab.module.Targeting>, "int toPaintY = 0;
");
	addMember(<class:jab.module.Targeting>, "public void onPaint(Graphics2D g) {
            if (bot.enemy != null) {
                g.setColor(Color.BLUE);
                g.drawOval(toPaintX - 5, toPaintY - 5,10,10);
                g.drawLine(toPaintX - 7, toPaintY, toPaintX + 7, toPaintY);
                g.drawLine(toPaintX, toPaintY - 7, toPaintX, toPaintY + 7);
                g.drawLine((int) bot.getX(), (int) bot.getY(), toPaintX, toPaintY);
            }
        }
");
	}
	