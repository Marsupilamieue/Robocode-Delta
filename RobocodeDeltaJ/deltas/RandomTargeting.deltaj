delta RandomTargeting {

    modifies jab.module.Targeting {

        adds import java.awt.Color;
        adds import java.awt.Graphics2D;
        adds import java.util.Random;
        adds import robocode.util.Utils;

        adds private Random random = new Random();

        modifies target() {
            if (bot.enemy != null) {
                double enemyX = bot.enemy.x;
                double enemyY = bot.enemy.y;

                // Dimas Idea: Use Gaussian distribution for more natural variation
                double randomOffsetX = random.nextGaussian() * 20; // Spread ~ Â±20
                double randomOffsetY = random.nextGaussian() * 20;

                double targetX = Math.max(18.0, Math.min(enemyX + randomOffsetX, bot.getBattleFieldWidth() - 18.0));
                double targetY = Math.max(18.0, Math.min(enemyY + randomOffsetY, bot.getBattleFieldHeight() - 18.0));

                double theta = Utils.normalAbsoluteAngle(Math.atan2(targetX - bot.getX(), targetY - bot.getY()));
                bot.setTurnGunRightRadians(Utils.normalRelativeAngle(theta - bot.getGunHeadingRadians()));

                toPaintX = (int) targetX;
                toPaintY = (int) targetY;
            }
        }

        adds int toPaintX = 0;
        adds int toPaintY = 0;

        adds public void onPaint(Graphics2D g) {
            if (bot.enemy != null) {
                g.setColor(Color.BLUE);
                g.drawOval(toPaintX - 5, toPaintY - 5, 10, 10);
                g.drawLine(toPaintX - 7, toPaintY, toPaintX + 7, toPaintY);
                g.drawLine(toPaintX, toPaintY - 7, toPaintX, toPaintY + 7);
                g.drawLine((int) bot.getX(), (int) bot.getY(), toPaintX, toPaintY);
            }
        }
    }
}
